<dependencies>
    <dependency>
        <groupId>io.socket</groupId>
        <artifactId>socket.io-client</artifactId>
        <version>1.0.0</version>
    </dependency>
</dependencies>



package org.example;

import io.socket.client.IO;
import io.socket.client.Socket;

import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;

public class SocketIOChecker {
    public static void main(String[] args) {
        try {
            IO.Options options = new IO.Options();
            options.reconnection = true;

            // Header Authorization (Basic)
            String username = "employees.consultor";
            String password = "gVh6#1TSyPt2";
            String basicAuth = "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes());

            HashMap<String, java.util.List<String>> headers = new HashMap<>();
            headers.put("Authorization", Collections.singletonList(basicAuth));
            options.extraHeaders = headers;

            // Direcci√≥n del servidor Socket.IO
            String url = "ws://socket-handle-tests.amaditaplayground.com:30008";

            Socket socket = IO.socket(url, options);

            socket.on(Socket.EVENT_CONNECT, args1 -> {
                System.out.println("‚úÖ Conectado al servidor");
                socket.emit("mensaje", "Hola desde Java");
            });

            socket.on("respuesta", args1 -> {
                System.out.println("üì© Respuesta: " + args1[0]);
            });

            socket.on(Socket.EVENT_DISCONNECT, args1 -> {
                System.out.println("‚ùå Desconectado");
            });

            socket.connect();

            // Espera 10 segundos
            Thread.sleep(10000);
            socket.disconnect();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
