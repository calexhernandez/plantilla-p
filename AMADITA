var IO = Packages.io.socket.client.IO;
var Socket = Packages.io.socket.client.Socket;
var EmitterListener = Packages.io.socket.emitter.Emitter.Listener;
var JSONObject = Packages.org.json.JSONObject;

// ‚úÖ Definir el objeto de autenticaci√≥n para el evento "auth"
var auth = new JSONObject();
auth.put("username", "employees.consultor");
auth.put("password", "gVh6#1TSyPt2");

// ‚úÖ Crear opciones
var options = new IO.Options();
options.forceNew = true;
options.reconnection = true;
options.reconnectionAttempts = 5;
options.timeout = 5000;

// ‚úÖ Transportes
var transports = java.lang.reflect.Array.newInstance(java.lang.String, 1);
transports[0] = "websocket";
options.transports = transports;

// ‚úÖ Encabezados como Map<String, List<String>>
var headers = new java.util.HashMap();
headers.put("username", java.util.Arrays.asList("employees.consultor"));
headers.put("password", java.util.Arrays.asList("gVh6#1TSyPt2"));
options.extraHeaders = headers;

// ‚úÖ Conexi√≥n al socket
var socket = IO.socket("http://socket-handle-tests.amaditaplayground.com:30008", options);

// ‚úÖ Evento: conectado
socket.on("connect", new EmitterListener({
    call: function(args) {
        logger.info("‚úÖ Connected to WebSocket!");
        // Emitimos autenticaci√≥n si el servidor espera evento 'auth'
        socket.emit("auth", auth.toString());
    }
}));

// ‚úÖ Evento: respuesta recibida
socket.on("sent order", new EmitterListener({
    call: function(args) {
        var response = args[0];
        logger.info("üì• Got response: " + response.toString());
        socket.disconnect();
    }
}));

// ‚úÖ Evento: error de conexi√≥n
socket.on("connect_error", new EmitterListener({
    call: function(args) {
        var err = args[0];
        logger.error("‚ùå Connection error: " + err.toString());
    }
}));

// ‚úÖ Conectar
socket.connect();
